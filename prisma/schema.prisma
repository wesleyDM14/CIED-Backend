// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum TicketType {
  NORMAL
  PREFERENCIAL
  AGENDAMENTO
}

enum TicketStatus {
  WAITING
  CALLED
  CANCELED
}

enum UserRole {
  ADMIN
  OPERATOR
}

enum MetodoPagamento {
  DINHEIRO
  PIX
  CARTAO
  CONVENIO
  SUS
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  role          UserRole  @default(OPERATOR)
  failedAttemps Int       @default(0)
  lockUntil     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Client {
  id             String    @id @default(uuid())
  name           String
  email          String?   @unique
  phone          String?
  cpf            String    @unique
  rg             String?   @unique
  dataNascimento DateTime?

  logradouro String?
  bairro     String?
  cidade     String?
  uf         String?
  num        Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  atendimentos Atendimento[]
}

model Ticket {
  id             String       @id @default(uuid())
  code           String
  type           TicketType
  status         TicketStatus @default(WAITING)
  serviceCounter String?
  scheduleAt     DateTime?

  procedimentoId String
  procedimento   Procedimento @relation(fields: [procedimentoId], references: [id])

  createdAt DateTime  @default(now())
  calledAt  DateTime?
  updatedAt DateTime  @updatedAt

  atendimento Atendimento?
}

model Procedimento {
  id               String @id @default(uuid())
  nomeProfissional String
  description      String

  schedules    ScheduleProcedimento[]
  tickets      Ticket[]
  atendimentos Atendimento[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Atendimento {
  id              String           @id @default(uuid())
  preco           Float?
  metodoPagamento MetodoPagamento?
  observacoes     String?
  data            DateTime

  ticketId String @unique
  ticket   Ticket @relation(fields: [ticketId], references: [id])

  clientId String?
  client   Client? @relation(fields: [clientId], references: [id])

  procedimentoId String
  procedimento   Procedimento @relation(fields: [procedimentoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WeeklySchedule {
  id        String   @id @default(uuid())
  weekStart DateTime @unique

  procedimentos ScheduleProcedimento[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ScheduleProcedimento {
  id String @id @default(uuid())

  weeklyScheduleId String
  weeklySchedule   WeeklySchedule @relation(fields: [weeklyScheduleId], references: [id])

  procedimentoId String
  procedimento   Procedimento @relation(fields: [procedimentoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
